<?xml version="1.0" encoding="UTF-8"?>
<wxgrammar_generator_file lang="cpp">
	<var name="header_doc">
/** @file $(filename).h
 * @author Nicolas Macherey (nicolas.macherey@gmail.com)
 * @date $(date)
 */
	</var>
	<var name="src_doc">
/** @file $(filename).cpp
  * @author Nicolas Macherey (nicolas.macherey@gmail.com)
  * @date $(date)
  */
	</var>
	<var name="extended_enumeration_hdr">
/** @class stdEnumeration
  * @brief Main class from which any enumeration class shall derive from
  * @author Nicolas Macherey (nicolas.macherey@gmail.com)
  * @date $(date)
  */
class stdEnumeration : public stdObject
{
	DECLARE_ABSTRACT_CLASS_STD( stdEnumeration )
	
public :
	
	/** Get values all childrens must overload this method */
	virtual const std::string* GetValues() const = 0;
	
	/** Get enumerated as a wxArrayInt */
	virtual std::vector&lt;unsigned int&gt; GetFlags() const = 0;
	
	/** Get the total number of enumerated values */
	virtual unsigned int GetCount() const = 0;
	
	/** Get the value from the flag */
	virtual const std::string&amp; GetFromFlag( unsigned int value ) const = 0;
	
	/** get the falg from value */
	virtual unsigned int GetUIntFromValue( const std::string&amp; value ) const = 0;
	
	/** get the flag */
	virtual unsigned int GetUIntFlag() const = 0;
	
	/** get the value */
	virtual const std::string&amp; GetValue() const = 0;
	
	/** Set the value */
	virtual void SetFlag( unsigned int value ) = 0;
	
	/** Set the value */
	virtual void SetValue( const std::string&amp; value ) = 0;

};
	</var>
	<var name="extended_enumeration_src">
/** Implement the wxWidgets RTTI dynamic calss information */
IMPLEMENT_ABSTRACT_CLASS_STD( stdEnumeration , stdObject )
	</var>
	<var name="base_object">stdObject</var>
	<var name="string_composer">"$(content)"</var>
	<var name="ctor_var_composer"> const $(content_type)&amp; _$(content)</var>
	<var name="ctor_var_composer2"> _$(content)</var>
	<var name="var_eqop_composer">	m_$(content) = rhs.m_$(content);
	m_has$(content) = rhs.m_has$(content);
	</var>
	<var name="var_eqeqop_composer">m_$(content) == rhs.m_$(content)</var>
	<var name="var_property_composer"> </var>
	<var name="var_definit_composer">,
			m_has$(content)(false)</var>
	<var name="var_init_composer">,
			m_$(content)(_$(content)),
			m_has$(content)(true)</var>
	<var name="var_copy_composer">,
			m_$(content)(rhs.m_$(content)),
			m_has$(content)(rhs.m_has$(content))</var>
	<var name="var_doc_composer">
	  * @param $(content) value for $(content) property of type $(content_type)</var>
	<var name="ext_eqop_composer">	if( m_$(content) != NULL ) {
		delete m_$(content);
		m_$(content) = NULL;
		m_has$(content) = false;
	}
	
	if( rhs.m$(content) != NULL ) {
		m_$(content) = rhs.m_$(content)->Clone();
		m_has$(content) = true;
	}
	</var>
	<var name="ext_dtor_composer">	if( m_$(content) != NULL ) {
		delete m_$(content);
		m_$(content) = NULL;
		m_has$(content) = false;
	}</var>
	<var name="ext_init_composer">,
		m_$(content)(NULL)</var>
	<var name="namespace_start">
namespace $(ns) {
	</var>
	<var name="globals_start">
$(header_doc)
#ifndef $(ns)_globals_H
#define $(ns)_globals_H

#include &lt;iostream&gt;
#include &lt;stdio.h&gt;
#include &lt;cstdio&gt;
#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;map&gt;
#include &lt;stack&gt;
#include &lt;set&gt;
#include &lt;string&gt;

#include &lt;libxml/xmlreader.h&gt;
#include &lt;libxml/xpath.h&gt;

#include &lt;stdDefines.h&gt;
#include &lt;stdException.h&gt;
#include &lt;stdObject.h&gt;
#include &lt;stdObjectFactory.h&gt;

#define $(exportmacro)
	</var>
	<var name="globals_end">

#endif // $(ns)_globals_H
	</var>
	<var name="global_file_src">
/** @file $(ns)_globals.cpp
  * @breif Main file for implementing globals informations
  * @author Nicolas Macherey (nicolas.macherey@gmail.com)
  * @date $(date)
  */
#include "$(ns)_globals.h"

$(globals_code_src)
	</var>
	<var name="global_file">
$(globals_start)

$(globals_code)

$(globals_end)
	</var>
	<var name="namespace_end">
};
	</var>
	<var name="object_defines">
#ifndef $(OBJECT)_H
#define $(OBJECT)_H
	</var>
	<var name="object_defines_end">
#endif // $(OBJECT)_H
	</var>
	<var name="object_simple_ctor_header">
	/** Default Constructor */
	$(object)():
$(object_bases_default_ctor)
	{};
	</var>
	<var name="object_complex_ctor_header">
	/** Default Constructor */
	$(object)():
$(object_bases_default_ctor) $(parameters_default_init_list)
	{};

	/** Basic Constructor $(parameters_doc_list)
	  */
	$(object)($(parameters_ctor_list)):
$(object_bases_init_list) $(parameters_init_list)
	{};
	</var>
	<template name="object">
		<objectpart file="header">
$(header_doc)

$(object_defines)

#include &lt;iostream&gt;
#include &lt;stdio.h&gt;
#include &lt;cstdio&gt;
#include &lt;iostream&gt;
#include &lt;vector&gt;
#include &lt;map&gt;
#include &lt;stack&gt;

#include &lt;libxml/xmlreader.h&gt;
#include &lt;libxml/xpath.h&gt;

$(local_includes)

/** preliminary define to enable the variant definition for that object */
$(object_imports)

/** @class $(object)
  * @brief Main class for handling $(object) nodes information in xml files
  * @author Nicolas Macherey (nicolas.macherey@gmail.com)
  * @date $(date)
  */
class $(exportmacro) $(object) : $(object_bases)
{
	DECLARE_DYNAMIC_CLASS_STD( $(object) )
public :
	/**********************************************************************
  	 * CONSTRUCTORS
	 *********************************************************************/

$(object_ctors)

	/** Copy constructor */
	$(object)( const $(object)&amp; rhs ):
$(object_bases_copy_list) $(parameters_copy_list)
	{};
	
	/** Clone method that any child must overload in order to enable the copy
	 * from the base object */
	virtual $(base_object)* Clone() {return new $(object)(*(this));}
	
	/** default destructor */
	virtual ~$(object)();
	
	/**********************************************************************
  	 * OPERATORS OVERLOAD
	 *********************************************************************/
	
	/** operator= overload */
	$(object)&amp; operator=( const $(object)&amp; rhs );

	/** operator== overload */
	bool operator==( const $(object)&amp; rhs ) const;

	/**********************************************************************
  	 * METHODS
	 *********************************************************************/
	
$(childs_header_public_code)

private :
$(childs_header_private_code)

protected:
$(childs_header_protected_code)
};

$(object_defines_end)
		</objectpart>
		<objectpart file="src">
$(src_doc)

#include "$(object).h"

IMPLEMENT_DYNAMIC_CLASS_STD( $(object) , $(object_bases_list) )

$(object)::~$(object)() {
$(parameters_dtor_list)
}

$(object)&amp; $(object)::operator=( const $(object)&amp; rhs )
{
$(parameters_eqop_list)

	return (*this);
}

bool $(object)::operator==( const $(object)&amp; rhs ) const
{
	return  (
$(parameters_eqeqop_list)
	 	);
}

$(childs_src_code)

		</objectpart>
	</template>
	<template name="property">
		<objectpart file="header" permission="protected">	$(type) m_$(name);
	bool m_has$(name);
</objectpart>
		<objectpart file="header" permission="public">
	/** Set the $(name) property
  	  * @param $(name) property value to set
  	  */
	void Set$(name_extension)( const $(type)&amp; value );

	/** Get the $(name) property
  	  * @return The property value as a $(type) object
	  */
	$(type)&amp; Get$(name_extension)( );
	
	/** Set the property $(name) has used */
	void SetHas$(name_extension)(bool value = true) {
		m_has$(name) = value;
	}
	
	/** Check if the object has the $(name) property set */
	bool Has$(name_extension)() const { return m_has$(name);};
		</objectpart>
		<objectpart file="src">
void $(object)::Set$(name_extension)( const $(type)&amp; value )
{
	m_$(name) = value;
	m_has$(name) = true;
}

$(type)&amp; $(object)::Get$(name_extension)( )
{
	return m_$(name);
}
		</objectpart>
	</template>
	<template name="attribute">
		<objectpart file="header" permission="protected">	$(type) m_$(name);
	bool m_has$(name);
</objectpart>
		<objectpart file="header" permission="public">
	/** Set the $(name) property
  	  * @param $(name) property value to set
  	  */
	void Set$(name_extension)( const $(type)&amp; value );

	/** Get the $(name) property
  	  * @return The property value as a $(type) object
	  */
	$(type)&amp; Get$(name_extension)( );
	
	/** Set the property $(name) has used */
	void SetHas$(name_extension)(bool value = true) {
		m_has$(name) = value;
	}
	
	/** Check if the object has the $(name) property set */
	bool Has$(name_extension)() const {return m_has$(name);};
		</objectpart>
		<objectpart file="src">
void $(object)::Set$(name_extension)( const $(type)&amp; value )
{
	m_$(name) = value;
	m_has$(name) = true;
}

$(type)&amp; $(object)::Get$(name_extension)( )
{
	return m_$(name);
}
		</objectpart>
	</template>
	<template name="property_any">
		<objectpart file="header" permission="protected">	$(type)* m_$(name);
	bool m_has$(name);
</objectpart>
		<objectpart file="header" permission="public">
	/** Set the $(name) property
  	  * @param $(name) property value to set
  	  */
	void Set$(name_extension)( $(type)* value );

	/** Get the $(name) property
  	  * @return The property value as a $(type) object
	  */
	$(type)* Get$(name_extension)( );
	
	/** Set the property $(name) has used */
	void SetHas$(name_extension)(bool value = true) {
		m_has$(name) = value;
	}
	
	/** Check if the object has the $(name) property set */
	bool Has$(name_extension)() const {return m_has$(name);};
		</objectpart>
		<objectpart file="src">
void $(object)::Set$(name_extension)( $(type)* value )
{
	m_$(name) = value;
	m_has$(name) = true;
}

$(type)* $(object)::Get$(name_extension)( )
{
	return m_$(name);
}
		</objectpart>
	</template>
	<template name="property_any_array">
		<objectpart file="header" permission="protected">	std::vector&lt;$(type)*&gt; m_$(name);
	bool m_has$(name);
</objectpart>
		<objectpart file="header" permission="public">
	
	/** Set the $(name) property
  	 * @param $(name) property value to set
  	 */
	void Set$(name_extension)( const std::vector&lt;$(type)*&gt;&amp; value );

	/** Get the $(name) property
  	 * @return The property value as a $(type) object
  	 */
	std::vector&lt;$(type)*&gt; Get$(name_extension)( );
	
	/** Set the $(name) property at the given index
  	 * @param $(name) property value to set
	 * @param index index of the element to set in the array
  	 */
	void Set$(name_extension)( $(type)* $value , unsigned int index );
	
	/** Add the $(name) property at the end of the array
  	 * @param $(name) property value to set
  	 */
	void Add$(name_extension)( $(type)* value );

	/** Get the $(name) property at the given index
	 * @param index property index to get
  	 * @return The property value as a $(type) object
  	 */
	$(type)* Get$(name_extension)( unsigned int index );
	
	/** Set the property $(name) has used */
	void SetHas$(name_extension)(bool value = true) {
		m_has$(name) = value;
	}
	
	/** Check if the object has the $(name) property set */
	bool Has$(name_extension)() const {return m_has$(name);};
		</objectpart>
		<objectpart file="src">
void $(object)::Set$(name_extension)( const std::vector&lt;$(type)*&gt;&amp; value )
{
	m_$(name) = value;
	m_has$(name) = m_$(name).size() &gt; 0;
}

std::vector&lt;$(type)*&gt;&amp; $(object)::Get$(name_extension)( )
{
	return m_$(name);
}

void $(object)::Set$(name_extension)( $(type)* value , unsigned int index )
{
	if( index >= m_$(name).size() )
		throw "error in $(object)::Set$(name) , index out of bounds";
	
	if( m_$(name)[index] != NULL )
		delete m_$(name)[index];
		
	m_$(name)[index] = value;
}

void $(object)::Add$(name_extension)( $(type)* value )
{		
	m_$(name).push_back(value);
}

$(type)* $(object)::Get$(name_extension)( unsigned int index )
{
	if( index >= m_$(name).size() )
		throw "error index out of bound in $(object)::Get$(name)";

	return m_$(name)[index];
}
		</objectpart>
	</template>
	<template name="child_enumerator">
		<objectpart file="header">
/* basic imports */
class $(name);

/** correspondance values for $(name) enumerator */
const $(type) $(name)Values [] = {
$(child_string_enum_list)
};
	
/** 
 * @class $(name)
 * @brief Class for managing enumerated types $(name)
 * @author Nicolas MACHEREY (nm@graymat.fr) http://www.rheia-framework.com
 * @date $(date)
 */
class $(name) : public stdEnumeration
{
public :

	/** constructor */
	$(name)():m_value(($(name)Flags)0){};
	
	/** copy ctor */
	$(name)(const $(name)&amp; rhs):
		m_value(rhs.m_value)
		{};
		
	/** Clone method */
	virtual stdObject* Clone() {return new $(name)(*this);};
	
	/** operator= overload */
	$(name)&amp; operator=( const $(name)&amp; rhs ){
		m_value = rhs.m_value;
		return (*this);
	}
	
	/** operator == overload */
	bool operator==( const $(name)&amp; rhs ) const{
		return (m_value==rhs.m_value);
	}
	
	/** enumerates flgas for $(name) enumerator */
	enum $(name)Flags {
	$(child_enum_list)
		// Always keep this one last in order to know the number of elements
		$(name)Num
	};	
	
	/** Get the total number of enumerated values */
	virtual unsigned int GetCount() const { return (unsigned int) $(name)Num;};
	
	/** Get enumerated as a wxArrayInt */
	virtual std::vector&lt;unsigned int&gt; GetFlags() const {
		std::vector&lt;unsigned int&gt; ret;
		for( unsigned int i = 0; i &lt; $(name)Num ; ++i )
			ret.push_back(i);
		return ret;
	};
	
	/** Get values */
	virtual const $(type)* GetValues() const {return $(name)Values;};
	
	/** Get the $(type) value assoiated to the given enumeration flag */
	const $(type)&amp; GetFromFlag( $(name)Flags value ) const {
		return $(name)Values[value];		
	}
	
	/** Get the $(type) value assoiated to the given enumeration flag */
	virtual const $(type)&amp; GetFromFlag( unsigned int value ) const {
		return $(name)Values[value];		
	}
	
	/** Get the flag associated to the given $(type) */
	$(name)Flags GetFromValue( const $(type)&amp; value ) const {
		for( unsigned int i = 0; i &lt; $(name)Num ; ++i )
			if( $(name)Values[i] == value )
				return ($(name)Flags) i;
			
			return $(name)Num;
	}
	
	/** Get the flag associated to the given $(type) */
	virtual unsigned int GetUIntFromValue( const $(type)&amp; value ) const {
		for( unsigned int i = 0; i &lt; $(name)Num ; ++i )
			if( $(name)Values[i] == value )
				return i;
			
			return (unsigned int) $(name)Num;
	}
	
	/** Get the flag */
	$(name)Flags GetFlag() const { return m_value; };
	
	/** Get the flag */
	virtual unsigned int GetUIntFlag() const { return (unsigned int) m_value; };
	
	/** Get the value from flag */
	virtual const $(type)&amp; GetValue() const {
		return GetFromFlag( m_value );
	}
	
	/** Set the value */
	void SetFlag( $(name)Flags value ) {m_value = value;};
	
	/** Set the value */
	virtual void SetFlag( unsigned int value ) {m_value = ($(name)Flags) value;};
	
	/** Set the value */
	virtual void SetValue( const $(type)&amp; value ) {
		for( unsigned int i = 0; i &lt; $(name)Num ; ++i )
			if( $(name)Values[i] == value )
				m_value = ($(name)Flags) i;
	}

private :

	$(name)Flags m_value;
		
	DECLARE_DYNAMIC_CLASS_STD( $(object) )
};
		</objectpart>
		<objectpart file="src">
/** Implement RTTI Information forenumeration class $(name) */
IMPLEMENT_DYNAMIC_CLASS_STD( $(name) , stdObject )
		</objectpart>
	</template>
	<template name="typedef">
		<objectpart file="header">
/** define a new type for $(name) */
typedef $(type) $(name);
		</objectpart>
	</template>
	<template name="array_addons">
		<objectpart file="header">
	/** Add a $(real_type) object in the container
	 * @param $(name) object to add in the container
	 */
	virtual void Add$(name_extension)( const $(real_type)&amp; value );
	
	/** Remove a $(real_type) object from the container at the given index
	 * @param index Index of the object to remove from the container
	 */
	virtual void Remove$(name_extension)ByIndex( unsigned int index );
	
	/** Set the $(name) property at the given index
  	 * @param $(name) property value to set
	 * @param index index of the element to set in the array
  	 */
	virtual void Set$(name_extension)At( const $(real_type)&amp; value , unsigned int index );

	/** Get the $(name) property at the given index
	 * @param index property index to get
  	 * @return The property value as a $(real_type) object
  	 */
	virtual $(real_type)&amp; Get$(name_extension)At( unsigned int index );
	
	/** Find the $(real_type) object index by object
	 * @param $(name) Object to find the index for
	 * @return stdNOT_FOUND if the object wasn't found
	 */
	virtual int FindIndexBy$(name_extension)( const $(real_type)&amp; value );
	
	/** Check the existance of the given $(real_type) object
	 * @param $(name) Object to check the existance for
	 * @return false if the object does not exists in the m_$(name) container
	 */
	virtual bool ExistsBy$(name_extension)( const $(real_type)&amp; value );
	
	/** Get the number of $(name) elements */
	virtual unsigned int Get$(name_extension)Count() {return m_$(name).size();}
	
	/** clear the container */
	virtual void Clear$(name_extension)() {m_$(name).clear();}
		</objectpart>
		<objectpart file="src">
void $(object)::Add$(name_extension)( const $(real_type)&amp; value )
{
	m_$(name).push_back(value);
	m_has$(name) = true;
}

void $(object)::Remove$(name_extension)ByIndex( unsigned int index )
{
	if( index >= m_$(name).size() )
		STD_THROW( "Error in $(object)::Remove$(name_extension)ByIndex , index out of bounds");
		
	std::vector&lt; $(real_type) &gt;::iterator it = m_$(name).begin() + index;
	m_$(name).erase(it);
}

void $(object)::Set$(name_extension)At( const $(real_type)&amp; value , unsigned int index )
{
	if( index >= m_$(name).size() )
		STD_THROW( "Error in $(object)::Set$(name_extension)At , index out of bounds" );
	
	m_$(name)[index] = value;
}

$(real_type)&amp; $(object)::Get$(name_extension)At( unsigned int index )
{
	if( index >= m_$(name).size() )
		STD_THROW( "Error index out of bound in $(object)::Get$(name)At" );

	return m_$(name)[index];
}

int $(object)::FindIndexBy$(name_extension)( const $(real_type)&amp; value )
{
	std::vector&lt; $(real_type) &gt;::iterator it = m_$(name).begin();
		
	for( int i = 0 ; it != m_$(name).end() ; ++it, ++i )
		if( (*it) == value )
			return i;

	return stdNOT_FOUND;
}

bool $(object)::ExistsBy$(name_extension)( const $(real_type)&amp; value )
{
	std::vector&lt; $(real_type) &gt;::iterator it = m_$(name).begin();
		
	for( int i = 0 ; it != m_$(name).end() ; ++it, ++i )
		if( (*it) == value )
			return true;

	return false;
}
		</objectpart>
	</template>
	<template name="array_property_finder">
		<objectpart file="header">
	/** Find the $(type) object by it's $(property) attribute
	 * @param $(property) property to find the object for
	 * @return NULL if the object with the given property wasn't found
	 */
	virtual $(type)* Find$(name_extension)By$(property_extension)( const $(proprety_type)&amp; $(property) );
	
	/** Check if the property with the given name exists in the m_$(name) container
	 * @param $(property) to chekc the assocated object existance for
	 * @return false if the object with the given property wasn't found
	 */
	virtual bool $(name_extension)ExistsBy$(property_extension)( const $(property_type)&amp; $(property) );
	
	/** List all objects properties and return them in an array of string
	 * @return an array of property containing all m_$(name) $(property)
	 */
	virtual std::vector&lt; $(property_type) &gt; Get$(name_extension)$(property_extension)List();
		</objectpart>
		<objectpart file="src">
$(type)* $(object)::Find$(name_extension)By$(property_extension)( const $(proprety_type)&amp; $(property) )
{
	std::vector&lt; $(type) &gt;::iterator it = m_$(name).begin()
		
	for( int i = 0 ; it != m_$(name).end() ; ++it, ++i )
		if( (*it).Get$(property_extension)() == $(property) )
			return &amp;(*it);

	return NULL;
}

bool $(object)::$(name_extension)ExistsBy$(property_extension)( const $(proprety_type)&amp; $(property) )
{
	std::vector&lt; $(type) &gt;::iterator it = m_$(name).begin()
		
	for( int i = 0 ; it != m_$(name).end() ; ++it, ++i )
		if( (*it).Get$(property_extension)() == $(property) )
			return true;

	return false;
}

std::vector&lt; $(property_type) &gt; $(object)::Get$(name_extension)$(property_extension)List()
{
	std::vector&lt; $(property_type)&gt; ret;
	std::vector&lt; $(type) &gt;::iterator it = m_$(name).begin()
		
	for( int i = 0 ; it != m_$(name).end() ; ++it, ++i )
		ret.push_back((*it).Get$(property_extension)() );

	return ret;
}
		</objectpart>
	</template>
	<!-- 
	 Type infos are used to notify the interpreter that the related types in the xml shall be
	 translated to the one given there.
	 It will consist into a map of elements specifying the source as a key and the destination
	 as a value.
	 If a type is not found it is assumed to be complex or to be generated in the file.
	-->
	<types_info>
		<typeinfo source="positiveInteger" destination="unsigned int"/>
		<typeinfo source="variant" destination="stdObject"/>
		<typeinfo source="string" destination="std::string"/>
		<typeinfo source="xs:string" destination="std::string"/>
		<typeinfo source="boolean" destination="bool"/>
		<typeinfo source="float" destination="double"/>
		<typeinfo source="integer" destination="int"/>
		<typeinfo source="long" destination="long"/>
		<typeinfo source="duration" destination="std::string"/>
		<typeinfo source="datetime" destination="std::string"/>
		<typeinfo source="dateTime" destination="std::string"/>
		<typeinfo source="date" destination="std::string"/>
		<typeinfo source="time" destination="std::string"/>
		<typeinfo source="gYear" destination="std::string"/>
		<typeinfo source="gYearMonth" destination="std::string"/>
		<typeinfo source="gMonth" destination="std::string"/>
		<typeinfo source="gMonthDay" destination="std::string"/>
		<typeinfo source="ID" destination="std::string"/>
		<typeinfo source="xs:ID" destination="std::string"/>
	</types_info>
</wxgrammar_generator_file>
