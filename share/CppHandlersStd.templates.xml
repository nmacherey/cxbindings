<?xml version="1.0" encoding="UTF-8"?>
<wxgrammar_generator_file lang="cpp">
	<var name="header_doc">
/** @file $(filename).h
 * @author Nicolas Macherey (nicolas.macherey@gmail.com)
 * This file is the handler for reading and writing $(object)'s into xml files.
 * @date $(date)
 */
	</var>
	<var name="src_doc">
/** @file $(filename).cpp
  * @author Nicolas Macherey (nicolas.macherey@gmail.com)
  * This file is the handler for reading and writing $(object)'s into xml files.
  * @date $(date)
  */
	</var>
	<var name="namespace_start">
namespace $(ns) {
	</var>
	<var name="namespace_end">
};
	</var>
	<var name="object_defines">
#ifndef $(OBJECT)XMLHANDLER_H
#define $(OBJECT)XMLHANDLER_H
	</var>
	<var name="object_defines_end">
#endif // $(OBJECT)XMLHANDER_H
	</var>
	<template name="object">
		<objectpart file="header">
$(header_doc)

$(object_defines)

/** @class $(object)XmlHandler
  * @brief Main class for reading and writing $(object) nodes information in xml files
  * @author Nicolas Macherey (nicolas.macherey@gmail.com)
  * @date $(date)
  */
class $(exportmacro) $(object)XmlHandler : public stdXmlHandler
{
	DECLARE_DYNAMIC_CLASS_STD( $(object)XmlHandler )
public :
	/**********************************************************************
  	 * CONSTRUCTORS
	 *********************************************************************/

	/** Default Constructor */
	$(object)XmlHandler(): 
		stdXmlHandler()
	{};


	/**********************************************************************
  	 * METHODS
	 *********************************************************************/
	/** This one is called from CreateResource after variables
	  * were filled.
	  * Any handlers shall overload this metohd in order to complete the 
	  * child stuff.
	  */
	virtual stdObject *DoCreateResource();

	/** This is the method you have to overload to write a resource
	  * to anode simply create a new node and write info in
	  */
	virtual xmlNode* DoWriteResource();	

	/** @return Returns true if it understands this node and can create
	  * a resource from it, false otherwise.
	  */
	virtual bool CanHandle(xmlNode *node);
	
	/** @return Returns true if it understands this node and can create
	  * a resource from it, false otherwise.
	  */
	virtual bool CanHandle(const std::string&amp; className);

	/** @return Returns true if it understands the given resource and
	  * can write it into an xmlNode 
	  */
	virtual bool CanHandle( stdObject* resource );
};

$(object_defines_end)
		</objectpart>
		<objectpart file="src">
$(src_doc)

#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;stdio.h&gt;
#include &lt;cstdio&gt;
#include &lt;sstream&gt;
#include &lt;vector&gt;
#include &lt;map&gt;
#include &lt;stack&gt;

#include &lt;libxml/xmlreader.h&gt;
#include &lt;libxml/xpath.h&gt;

#include &lt;stdXmlReader.h&gt;

#include "$(ns)_globals.h"

$(local_includes)

#include "$(object).h"
#include "handlers/$(object)XmlHandler.h"

IMPLEMENT_DYNAMIC_CLASS_STD( $(object)XmlHandler , stdXmlHandler )
stdREGISTER_XMLHANDLER( $(object)XmlHandler , "Handler for reading and writing $(object) nodes from an XML file" );

bool $(object)XmlHandler::CanHandle(xmlNode *node)
{
	if( node == NULL )
		return false;

	std::string nodeName = (char*) node-&gt;name;
	
	if( nodeName.compare( "$(object_node_name)" ) == 0 )
		return true;

	return false;
}

bool $(object)XmlHandler::CanHandle(const std::string&amp; className)
{	
	if( className.compare( "$(object)" ) == 0 )
		return true;

	return false;
}

stdObject *$(object)XmlHandler::DoCreateResource()
{
	stdMAKE_INSTANCE( $(object)Instance , $(object) );

$(objects_attribute_readers)
	
	xmlNode* childnode = m_node-&gt;children;	

	while( childnode != NULL )
	{
		std::string cname = (char*) childnode->name;
		
$(objects_property_readers)

		childnode = childnode-&gt;next;
	}

	return $(object)Instance;
}

xmlNode* $(object)XmlHandler::DoWriteResource()
{
	$(object)* $(object)Instance = dynamic_cast&lt;$(object)*&gt;(m_instance);
    const xmlChar* nodeName = m_nodename.empty() ? ((const xmlChar*) "$(object_node_name)") : ((const xmlChar*) m_nodename.c_str());
	xmlNode* node = xmlNewNode( NULL , (const xmlChar*) nodeName );

	xmlNode* childnode;
	
$(objects_attribute_writers)
	
$(objects_property_writers)

	return node;
}

bool $(object)XmlHandler::CanHandle(stdObject *resource)
{
	if( resource == NULL )
		return false;

	std::string className = resource->GetClassInfo()->GetClassName();
	
	if( className.compare( "$(object)" ) == 0 )
		return true;

	return false;
}
		</objectpart>
	</template>
	
	
	<!-- ATTRIBUTES READER AND WRITER TEMPLATES -->
	<template name="attribute_reader_string">
		<objectpart file="src">
	std::string $(name) = GetXmlAttr( m_node , "$(name)" );
	$(object)Instance->Set$(name_extension)($(name));
		</objectpart>
	</template>
	<template name="attribute_reader_int">
		<objectpart file="src">
	std::string $(name)str = GetXmlAttr( m_node , "$(name)" );
	std::stringstream strm;
	strm &lt;&lt; $(name)str;
	int $(name);
	strm &gt;&gt; $(name);
	$(object)Instance->Set$(name_extension)($(name));
		</objectpart>
	</template>
	<template name="attribute_reader_enum">
		<objectpart file="src">
	std::string $(name)str = GetXmlAttr( m_node , "$(name)" );
	if( !$(name)str.empty() ) {
		$(type) $(name)Value;
		$(name)Value.SetValue($(name)str);
		$(object)Instance->Set$(name_extension)($(name)Value);
	}
		</objectpart>
	</template>
	<template name="attribute_reader_uint">
		<objectpart file="src">
	std::string $(name)str = GetXmlAttr( m_node , "$(name)" );
	std::stringstream strm;
	strm &lt;&lt; $(name)str;
	unsigned int $(name);
	strm &gt;&gt; $(name);
	$(object)Instance->Set$(name_extension)($(name));
		</objectpart>
	</template>
	<template name="attribute_reader_long">
		<objectpart file="src">
	std::string $(name)str = GetXmlAttr( m_node , "$(name)" );
	
	std::stringstream strm;
	strm &lt;&lt; $(name)str;
	long $(name);
	strm &gt;&gt; $(name);
	$(object)Instance->Set$(name_extension)($(name));
		</objectpart>
	</template>
	<template name="attribute_reader_ulong">
		<objectpart file="src">
	std::string $(name)str = GetXmlAttr( m_node , "$(name)" );
	
	std::stringstream strm;
	strm &lt;&lt; $(name)str;
	long $(name);
	strm &gt;&gt; $(name);
	$(object)Instance->Set$(name_extension)((unsigned long)$(name));
		</objectpart>
	</template>
	<template name="attribute_reader_bool">
		<objectpart file="src">
	std::string $(name)str = GetXmlAttr( m_node , "$(name)" );
	
	bool $(name) = ( $(name)str.compare("true") == 0 );
	$(object)Instance->Set$(name_extension)($(name));
		</objectpart>
	</template>
	<template name="attribute_reader_double">
		<objectpart file="src">
	std::string $(name)str = GetXmlAttr( m_node , "$(name)" );
	
	std::stringstream strm;
	strm &lt;&lt; $(name)str;
	double $(name);
	strm &gt;&gt; $(name);
	$(object)Instance->Set$(name_extension)($(name));
		</objectpart>
	</template>
	<template name="attribute_reader_float">
		<objectpart file="src">
	std::string $(name)str = GetXmlAttr( m_node , "$(name)" );
	
	std::stringstream strm;
	strm &lt;&lt; $(name)str;
	double $(name);
	strm &gt;&gt; $(name);
	$(object)Instance->Set$(name_extension)((float)$(name));
		</objectpart>
	</template>
	<template name="attribute_writer_string">
		<objectpart file="src">
	if( $(object)Instance->Has$(name_extension)() ) {
		std::string $(name) = $(object)Instance->Get$(name_extension)();
		xmlNewProp( node , (const xmlChar*) "$(name)" , stdx2C($(name)) ); 
	}
		</objectpart>
	</template>
	<template name="attribute_writer_int">
		<objectpart file="src">
	if( $(object)Instance->Has$(name_extension)() ) {
		std::stringstream strm;
		strm &lt;&lt; $(object)Instance->Get$(name_extension)();
		std::string $(name)str;
		strm >> $(name)str;
		xmlNewProp( node , (const xmlChar*) "$(name)" , stdx2C($(name)str) );
	}
		</objectpart>
	</template>
	<template name="attribute_writer_enum">
		<objectpart file="src">
	if( $(object)Instance->Has$(name_extension)() ) {
		std::stringstream strm;
		strm &lt;&lt; $(object)Instance->Get$(name_extension)().GetValue();
		std::string $(name)str;
		strm >> $(name)str;
		xmlNewProp( node , (const xmlChar*) "$(name)" , stdx2C($(name)str) );
	}
		</objectpart>
	</template>
	<template name="attribute_writer_uint">
		<objectpart file="src">
	if( $(object)Instance->Has$(name_extension)() ) {
		std::stringstream strm;
		strm &lt;&lt; $(object)Instance->Get$(name_extension)();
		std::string $(name)str;
		strm >> $(name)str;
		xmlNewProp( node , (const xmlChar*) "$(name)" , stdx2C($(name)str) );
	}
		</objectpart>
	</template>
	<template name="attribute_writer_long">
		<objectpart file="src">
	if( $(object)Instance->Has$(name_extension)() ) {
		std::stringstream strm;
		strm &lt;&lt; $(object)Instance->Get$(name_extension)();
		std::string $(name)str;
		strm >> $(name)str;
		xmlNewProp( node , (const xmlChar*) "$(name)" , stdx2C($(name)str) );
	}
		</objectpart>
	</template>
	<template name="attribute_writer_ulong">
		<objectpart file="src">
	if( $(object)Instance->Has$(name_extension)() ) {
		std::stringstream strm;
		strm &lt;&lt; $(object)Instance->Get$(name_extension)();
		std::string $(name)str;
		strm >> $(name)str;
		xmlNewProp( node , (const xmlChar*) "$(name)" , stdx2C($(name)str) );
	}
		</objectpart>
	</template>
	<template name="attribute_writer_bool">
		<objectpart file="src">
	if( $(object)Instance->Has$(name_extension)() ) {
		std::string $(name)str = $(object)Instance->Get$(name_extension)() ? "true" : "false";
		xmlNewProp( node , (const xmlChar*) "$(name)" , stdx2C($(name)str) );
	}
		</objectpart>
	</template>
	<template name="attribute_writer_double">
		<objectpart file="src">
	if( $(object)Instance->Has$(name_extension)() ) {
		std::stringstream strm;
		strm &lt;&lt; $(object)Instance->Get$(name_extension)();
		std::string $(name)str;
		strm >> $(name)str;
		xmlNewProp( node , (const xmlChar*) "$(name)" , stdx2C($(name)str) );
	}
		</objectpart>
	</template>
	<template name="attribute_writer_float">
		<objectpart file="src">
	if( $(object)Instance->Has$(name_extension)() ) {
		std::stringstream strm;
		strm &lt;&lt; $(object)Instance->Get$(name_extension)();
		std::string $(name)str;
		strm >> $(name)str;
		xmlNewProp( node , (const xmlChar*) "$(name)" , stdx2C($(name)str) );
	}
		</objectpart>
	</template>
	
	<!-- PROPERTIES READER AND WRITER TEMPLATES -->
	<template name="property_reader_string">
		<objectpart file="src">
		if( cname.compare("$(name)") == 0 ) {
			std::string $(name) = GetXmlContent( childnode );
			$(object)Instance->Set$(name_extension)($(name));
		}
		</objectpart>
	</template>
	<template name="property_reader_arraystring">
		<objectpart file="src">
		if( cname.compare("$(name)") == 0 ) {
			std::string $(name) = GetXmlContent( childnode );
			$(object)Instance->Add$(name_extension)($(name));
		}
		</objectpart>
	</template>
	<template name="property_reader_int">
		<objectpart file="src">
		if( cname.compare("$(name)") == 0 ) {
			std::string $(name)str = GetXmlContent( childnode );
			
			std::stringstream strm;
			strm &lt;&lt; $(name)str;
			int $(name);
			strm &gt;&gt; $(name);
			$(object)Instance->Set$(name_extension)($(name));
		}
		</objectpart>
	</template>
	<template name="property_reader_arrayint">
		<objectpart file="src">
		if( cname.compare("$(name)") == 0 ) {
			std::string $(name)str = GetXmlContent( childnode );
			
			std::stringstream strm;
			strm &lt;&lt; $(name)str;
			int $(name);
			strm &gt;&gt; $(name);
			$(object)Instance->Add$(name_extension)($(name));
		}
		</objectpart>
	</template>
	<template name="property_reader_enum">
		<objectpart file="src">
		if( cname.compare("$(name)") == 0 ) {
			std::string $(name)str = GetXmlContent( childnode );
			$(type) $(name)Value;
			$(name)Value.SetValue($(name)str);
			$(object)Instance->Set$(name_extension)($(name)Value);
		}
		</objectpart>
	</template>
	<template name="property_reader_uint">
		<objectpart file="src">
		if( cname.compare("$(name)") == 0 ) {
			std::string $(name)str = GetXmlContent( childnode );
			
			std::stringstream strm;
			strm &lt;&lt; $(name)str;
			unsigned int $(name);
			strm &gt;&gt; $(name);
			$(object)Instance->Set$(name_extension)($(name));
		}
		</objectpart>
	</template>
	<template name="property_reader_long">
		<objectpart file="src">
		if( cname.compare("$(name)") == 0 ) {
			std::string $(name)str = GetXmlContent( childnode );
			
			std::stringstream strm;
			strm &lt;&lt; $(name)str;
			long $(name);
			strm &gt;&gt; $(name);
			$(object)Instance->Set$(name_extension)($(name));
		}
		</objectpart>
	</template>
	<template name="property_reader_arraylong">
		<objectpart file="src">
		if( cname.compare("$(name)") == 0 ) {
			std::string $(name)str = GetXmlContent( childnode );
			
			std::stringstream strm;
			strm &lt;&lt; $(name)str;
			long $(name);
			strm &gt;&gt; $(name);
			$(object)Instance->Add$(name_extension)($(name));
		}
		</objectpart>
	</template>
	<template name="property_reader_ulong">
		<objectpart file="src">
		if( cname.compare("$(name)") == 0 ) {
			std::string $(name)str = GetXmlContent( childnode );
			
			std::stringstream strm;
			strm &lt;&lt; $(name)str;
			long $(name);
			strm &gt;&gt; $(name);
			$(object)Instance->Set$(name_extension)((unsigned long)$(name));
		}
		</objectpart>
	</template>
	<template name="property_reader_arrayulong">
		<objectpart file="src">
		if( cname.compare("$(name)") == 0 ) {
			std::string $(name)str = GetXmlContent( childnode );
			
			std::stringstream strm;
			strm &lt;&lt; $(name)str;
			long $(name);
			strm &gt;&gt; $(name);
			$(object)Instance->Add$(name_extension)((unsigned long)$(name));
		}
		</objectpart>
	</template>
	<template name="property_reader_bool">
		<objectpart file="src">
		if( cname.compare("$(name)") == 0 ) {
			std::string $(name)str = GetXmlContent( childnode );
			
			bool $(name) = ( $(name)str.compare("true") == 0 );
			$(object)Instance->Set$(name_extension)($(name));
		}
		</objectpart>
	</template>
	<template name="property_reader_arraybool">
		<objectpart file="src">
		if( cname.compare("$(name)") == 0 ) {
			std::string $(name)str = GetXmlContent( childnode );
			
			bool $(name) = ($(name)str.compare("true") == 0);
			$(object)Instance->Add$(name_extension)($(name));
		}
		</objectpart>
	</template>
	<template name="property_reader_double">
		<objectpart file="src">
		if( cname.compare("$(name)") == 0 ) {
			std::string $(name)str = GetXmlContent( childnode );
			
			std::stringstream strm;
			strm &lt;&lt; $(name)str;
			double $(name);
			strm &gt;&gt; $(name);
			$(object)Instance->Set$(name_extension)($(name));
		}
		</objectpart>
	</template>
	<template name="property_reader_arraydouble">
		<objectpart file="src">
		if( cname.compare("$(name)") == 0 ) {
			std::string $(name)str = GetXmlContent( childnode );
			
			std::stringstream strm;
			strm &lt;&lt; $(name)str;
			double $(name);
			strm &gt;&gt; $(name);
			$(object)Instance->Add$(name_extension)($(name));
		}
		</objectpart>
	</template>
	<template name="property_reader_float">
		<objectpart file="src">
		if( cname.compare("$(name)") == 0 ) {
			std::string $(name)str = GetXmlContent( childnode );
			
			std::stringstream strm;
			strm &lt;&lt; $(name)str;
			double $(name);
			strm &gt;&gt; $(name);
			$(object)Instance->Set$(name_extension)((float)$(name));
		}
		</objectpart>
	</template>
	<template name="property_reader_arrayfloat">
		<objectpart file="src">
		if( cname.compare("$(name)") == 0 ) {
			std::string $(name)str = GetXmlContent( childnode );
			
			std::stringstream strm;
			strm &lt;&lt; $(name)str;
			double $(name);
			strm &gt;&gt; $(name);
			$(object)Instance->Add$(name_extension)((float)$(name));
		}
		</objectpart>
	</template>
	<template name="property_writer_string">
		<objectpart file="src">
	if( $(object)Instance->Has$(name_extension)() ) {
		std::string $(name) = $(object)Instance->Get$(name_extension)();
		xmlNewChild( node , NULL , (const xmlChar*) "$(name)" , stdx2C($(name)) ); 
	}
		</objectpart>
	</template>
	<template name="property_writer_arraystring">
		<objectpart file="src">
	if( $(object)Instance->Has$(name_extension)() ) {
		std::vector&lt;std::string&gt;&amp; $(name) = $(object)Instance->Get$(name_extension)();
		for( unsigned int i = 0; i &lt; $(name).size() ; ++ i )
			xmlNewChild( node , NULL , (const xmlChar*) "$(name)" , stdx2C($(name)[i]) ); 
	}
		</objectpart>
	</template>
	<template name="property_writer_int">
		<objectpart file="src">
	if( $(object)Instance->Has$(name_extension)() ) {
		std::stringstream strm;
		strm &lt;&lt; $(object)Instance->Get$(name_extension)();
		std::string $(name)str;
		strm >> $(name)str;
		xmlNewChild( node , NULL , (const xmlChar*) "$(name)" , stdx2C($(name)str) );
	}
		</objectpart>
	</template>
	<template name="property_writer_arrayint">
		<objectpart file="src">
	if( $(object)Instance->Has$(name_extension)() ) {
		std::vector&lt;int&gt;&amp; $(name) = $(object)Instance->Get$(name_extension)();
		for( unsigned int i = 0; i &lt; $(name).size() ; ++ i ) {
			std::stringstream strm;
			strm &lt;&lt; $(name)[i];
			std::string $(name)str;
			strm >> $(name)str;
			xmlNewChild( node , NULL , (const xmlChar*) "$(name)" , stdx2C($(name)str) );
		}
	}
		</objectpart>
	</template>
	<template name="property_writer_enum">
		<objectpart file="src">
	if( $(object)Instance->Has$(name_extension)() ) {
		std::string $(name)str = $(object)Instance->Get$(name_extension)().GetValue();
		xmlNewChild( node , NULL , (const xmlChar*) "$(name)" , stdx2C($(name)str) );
	}
		</objectpart>
	</template>
	<template name="property_writer_uint">
		<objectpart file="src">
	if( $(object)Instance->Has$(name_extension)() ) {
		std::stringstream strm;
		strm &lt;&lt; $(object)Instance->Get$(name_extension)();
		std::string $(name)str;
		strm >> $(name)str;
		xmlNewChild( node , NULL , (const xmlChar*) "$(name)" , stdx2C($(name)str) );
	}
		</objectpart>
	</template>
	<template name="property_writer_arrayuint">
		<objectpart file="src">
	if( $(object)Instance->Has$(name_extension)() ) {
		std::vector&lt;unsigned int&gt;&amp; $(name) = $(object)Instance->Get$(name_extension)();
		for( unsigned int i = 0; i &lt; $(name).size() ; ++ i ) {
			std::stringstream strm;
			strm &lt;&lt; $(name)[i];
			std::string $(name)str;
			strm >> $(name)str;
			xmlNewChild( node , NULL , (const xmlChar*) "$(name)" , stdx2C($(name)str) );
		}
	}
		</objectpart>
	</template>
	<template name="property_writer_long">
		<objectpart file="src">
	if( $(object)Instance->Has$(name_extension)() ) {
		sstd::stringstream strm;
		strm &lt;&lt; $(object)Instance->Get$(name_extension)();
		std::string $(name)str;
		strm >> $(name)str;
		xmlNewChild( node , NULL , (const xmlChar*) "$(name)" , stdx2C($(name)str) );
	}
		</objectpart>
	</template>
	<template name="property_writer_arraylong">
		<objectpart file="src">
	if( $(object)Instance->Has$(name_extension)() ) {
		std::vector&lt;long&gt;&amp; $(name) = $(object)Instance->Get$(name_extension)();
		for( unsigned int i = 0; i &lt; $(name).size() ; ++ i ) {
			std::stringstream strm;
			strm &lt;&lt; $(name)[i];
			std::string $(name)str;
			strm >> $(name)str;
			xmlNewChild( node , NULL , (const xmlChar*) "$(name)" , stdx2C($(name)str) );
		}
	}
		</objectpart>
	</template>
	<template name="property_writer_ulong">
		<objectpart file="src">
	if( $(object)Instance->Has$(name_extension)() ) {
		std::stringstream strm;
		strm &lt;&lt; $(object)Instance->Get$(name_extension)();
		std::string $(name)str;
		strm >> $(name)str;
		xmlNewChild( node , NULL , (const xmlChar*) "$(name)" , stdx2C($(name)str) );
	}
		</objectpart>
	</template>
	<template name="property_writer_arrayulong">
		<objectpart file="src">
	if( $(object)Instance->Has$(name_extension)() ) {
		std::vector&lt;unsigned long&gt;&amp; $(name) = $(object)Instance->Get$(name_extension)();
		for( unsigned int i = 0; i &lt; $(name).size() ; ++ i ) {
			std::stringstream strm;
			strm &lt;&lt; $(name)[i];
			std::string $(name)str;
			strm >> $(name)str;
			xmlNewChild( node , NULL , (const xmlChar*) "$(name)" , stdx2C($(name)str) );
		}
	}
		</objectpart>
	</template>
	<template name="property_writer_bool">
		<objectpart file="src">
	if( $(object)Instance->Has$(name_extension)() ) {
		std::string $(name)str = $(object)Instance->Get$(name_extension)() ? "true" : "false";
		xmlNewChild( node , NULL , (const xmlChar*) "$(name)" , stdx2C($(name)str) );
	}
		</objectpart>
	</template>
	<template name="property_writer_arraybool">
		<objectpart file="src">
	if( $(object)Instance->Has$(name_extension)() ) {
		std::vector&lt;bool&gt;&amp; $(name) = $(object)Instance->Get$(name_extension)();
		for( unsigned int i = 0; i &lt; $(name).size() ; ++ i ) {
			std::string $(name)str = $(name)[i] ? "true" : "false";
			xmlNewChild( node , NULL , (const xmlChar*) "$(name)" , stdx2C($(name)str) );
		}
	}
		</objectpart>
	</template>
	<template name="property_writer_double">
		<objectpart file="src">
	if( $(object)Instance->Has$(name_extension)() ) {
		std::stringstream strm;
		strm &lt;&lt; $(object)Instance->Get$(name_extension)();
		std::string $(name)str;
		strm >> $(name)str;
		xmlNewChild( node , NULL , (const xmlChar*) "$(name)" , stdx2C($(name)str) );
	}
		</objectpart>
	</template>
	<template name="property_writer_arraydouble">
		<objectpart file="src">
	if( $(object)Instance->Has$(name_extension)() ) {
		std::vector&lt;double&gt;&amp; $(name) = $(object)Instance->Get$(name_extension)();
		for( unsigned int i = 0; i &lt; $(name).size() ; ++ i ) {
			std::stringstream strm;
			strm &lt;&lt; $(name)[i];
			std::string $(name)str;
			strm >> $(name)str;
			xmlNewChild( node , NULL , (const xmlChar*) "$(name)" , stdx2C($(name)str) );
		}
	}
		</objectpart>
	</template>
	<template name="property_writer_float">
		<objectpart file="src">
	if( $(object)Instance->Has$(name_extension)() ) {
		sstd::stringstream strm;
		strm &lt;&lt; $(object)Instance->Get$(name_extension)();
		std::string $(name)str;
		strm >> $(name)str;
		xmlNewChild( node , NULL , (const xmlChar*) "$(name)" , stdx2C($(name)str) );
	}
		</objectpart>
	</template>
	<template name="property_writer_arrayfloat">
		<objectpart file="src">
	if( $(object)Instance->Has$(name_extension)() ) {
		std::vector&lt;float&gt;&amp; $(name) = $(object)Instance->Get$(name_extension)();
		for( unsigned int i = 0; i &lt; $(name).size() ; ++ i ) {
			std::stringstream strm;
			strm &lt;&lt; $(name)[i];
			std::string $(name)str;
			strm >> $(name)str;
			xmlNewChild( node , NULL , (const xmlChar*) "$(name)" , stdx2C($(name)str) );
		}
	}
		</objectpart>
	</template>
	
	<!-- OBJECT TEMPLATES -->
	
	<template name="property_reader_object">
		<objectpart file="src">
		if( cname.compare("$(name)") == 0 ) {
			$(type)* $(name) = ($(type)*) CreateResFromNode(childnode,"$(type)",NULL);
			if( $(name) != NULL ) {
				$(object)Instance->Set$(name_extension)(*$(name));
				delete $(name);
			}
		}
		</objectpart>
	</template>
	<template name="property_reader_arrayobject">
		<objectpart file="src">
		if( cname.compare("$(name)") == 0 ) {
			$(type)* $(name) = ($(type)*) CreateResFromNode(childnode,"$(type)",NULL);
			if( $(name) != NULL ) {
				$(object)Instance->Add$(name_extension)(*$(name));
				delete $(name);
			}
		}
		</objectpart>
	</template>
	<template name="property_writer_object">
		<objectpart file="src">
	if( $(object)Instance->Has$(name_extension)() ) {
		childnode = stdXmlReader::Get()->WriteResource( &amp;($(object)Instance->Get$(name_extension)()), "$(name)");
		if( childnode != NULL )
			xmlAddChild( node , childnode );
	}
		</objectpart>
	</template>
	<template name="property_writer_arrayobject">
		<objectpart file="src">
	if( $(object)Instance->Has$(name_extension)() ) {
		for( unsigned int i = 0; i &lt; $(object)Instance-&gt;Get$(name_extension)().size() ; ++i )
		{
			childnode = stdXmlReader::Get()->WriteResource( &amp;( $(object)Instance-&gt;Get$(name_extension)()[i]),"$(name)");
			if( childnode != NULL )
				xmlAddChild( node , childnode );
		}
	}
		</objectpart>
	</template>
	
	<!-- ANY TEMPLATES -->
	
	<template name="property_reader_any">
		<objectpart file="src">
		else if( !cname.IsEmpty() ) {
			stdObject* $(name) = CreateResFromNode(childnode,stdEmptyString,NULL);
			if( $(name) != NULL ) {
				wxAny anyObject = $(name);
				$(object)Instance->Set$(name_extension)(anyObject);
			}
		}
		</objectpart>
	</template>
	<template name="property_reader_arrayany">
		<objectpart file="src">
		else if( !cname.IsEmpty() ) {
			stdObject* $(name) = CreateResFromNode(childnode,stdEmptyString,NULL);
			if( $(name) != NULL ) {
				$(object)Instance->Add$(name_extension)($(name));
			}
		}
		</objectpart>
	</template>
	<template name="property_writer_any">
		<objectpart file="src">
	if( $(object)Instance->Has$(name_extension)() ) {
		childnode = stdXmlReader::Get()->WriteResource( $(object)Instance->Get$(name_extension)() );
		if( childnode != NULL )
			xmlAddChild( node , childnode );
	}
		</objectpart>
	</template>
	<template name="property_writer_arrayany">
		<objectpart file="src">
	if( $(object)Instance->Has$(name_extension)() ) {
		for( unsigned int i = 0; i &lt; $(object)Instance-&gt;Get$(name_extension)().size() ; ++i )
		{
			childnode = stdXmlReader::Get()->WriteResource( $(object)Instance-&gt;Get$(name_extension)()[i] );
			if( childnode != NULL )
				xmlAddChild( node , childnode );
		}
	}
		</objectpart>
	</template>
	
	<!-- OTHER TEMPLATES -->

	<!-- 
	 Type infos are used to notify the interpreter that the related types in the xml shall be
	 translated to the one given there.
	 It will consist into a map of elements specifying the source as a key and the destination
	 as a value.
	 If a type is not found it is assumed to be complex or to be generated in the file.
	-->
	<types_info>
		<typeinfo source="positiveInteger" destination="unsigned int"/>
		<typeinfo source="variant" destination="stdObject"/>
		<typeinfo source="string" destination="std::string"/>
		<typeinfo source="boolean" destination="bool"/>
		<typeinfo source="float" destination="double"/>
		<typeinfo source="integer" destination="int"/>
		<typeinfo source="dateTime" destination="std::string"/>
		<typeinfo source="duration" destination="std::string"/>
		<typeinfo source="datetime" destination="std::string"/>
		<typeinfo source="date" destination="std::string"/>
		<typeinfo source="time" destination="std::string"/>
		<typeinfo source="gYear" destination="std::string"/>
		<typeinfo source="gYearMonth" destination="std::string"/>
		<typeinfo source="gMonth" destination="std::string"/>
		<typeinfo source="gMonthDay" destination="std::string"/>
		<typeinfo source="ID" destination="unsigned int"/>
	</types_info>
</wxgrammar_generator_file>
